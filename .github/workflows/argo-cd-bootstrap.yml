name: "Bootstrap Argo CD"
on:
  pull_request:
    types: [closed]

permissions: write-all

jobs:
  argo_cd:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3.0.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2 
          verbose: false 
          arch: amd64 

      - name: verify aws  profile
        run: |
          aws sts get-caller-identity
          aws configure list

      - name: install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.31.0'

      - name: configure kubectl
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: verify argocd namespace
        id: verify-argocd-namespace
        run: echo "ns=$(kubectl get ns argocd -o=jsonpath="{.metadata.name}")" >> "$GITHUB_OUTPUT"

      - name: install argocd # non-HA version
        if: ${{ (steps.verify-argocd-namespace.outputs.ns != 'argocd') }}
        run: |
          kubectl create namespace argocd
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/v2.14.2/manifests/install.yaml

      - name: checkout code
        uses: actions/checkout@v4

    #   - name: install cluster app of apps
    #     run: kubectl apply -f kubernetes/app-of-apps.yaml

    #   - name: verify if all apps are synced
    #     run: |
    #       while true; do
    #         sync_status=`(kubectl -n argocd get Application -o=jsonpath='{.items[*].status.sync.status}')`
    #         for status in $sync_status; do
    #           if [ "$status" != "Synced" ]; then
    #             echo "Not all apps are synced, waiting 10 seconds"
    #             sleep 10
    #             continue 2
    #           fi
    #           break 2
    #         done
    #       done



      - name: set argocd admin password
        run: |
          kubectl -n argocd patch secret argocd-secret -p '{"stringData": {"admin.password": "${{ secrets.ARGOCD_ADMIN_PASSWORD }}"}}'